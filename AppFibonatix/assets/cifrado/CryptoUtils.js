import * as Crypto from 'expo-crypto';

const P = [
    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
    0x9216d5d9, 0x8979fb1b
];

const S = [
    [
        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
        0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
        0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
        0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
        0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
        0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
        0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
        0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
        0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
        0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
        0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
        0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
        0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
        0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
        0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
        0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
        0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
        0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
        0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
        0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
        0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
        0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
        0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
        0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
        0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
        0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a
    ],
    [
        0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
        0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
        0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
        0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
        0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
        0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
        0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
        0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
        0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
        0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
        0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
        0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
        0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
        0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
        0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
        0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
        0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
        0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
        0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
        0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
        0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
        0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
        0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
        0xa6078084, 0x19f8509e, 0x5eca5d66, 0x0ab03d6b, 0x18d6a3e8, 0xa7020717, 0xf4da50d6, 0x5e471d16,
        0x5d941b01, 0x0e8889e2, 0xeca8cc7d, 0x0aaa84db, 0x48a4dd37, 0x5c681f7c, 0x1ab5ea52, 0x591073d3,
        0x6cbce57e, 0x6bb4e0bd, 0x866a7e20, 0xa4e8d1fa, 0x1e0e95ed, 0x0a8a6d2f, 0xa8c6e50f, 0x982e7c6f,
        0xa34f58a9, 0xe979f7f4, 0x8d20fafb
    ],
    [
        0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x1b9e9bfb,
        0x3754f4da, 0x9ff0a51a, 0x8370733c, 0x0a6d8a5e, 0x8f259c30, 0x10f05054, 0x020b524d, 0x13555a3a,
        0x71b15045, 0x9a8f4608, 0xc9f2c1f1, 0x77737a0b, 0x628ea1ac, 0x19ec4a07, 0x0b8dfd51, 0x24033660,
        0xe16d5a91, 0x9465c477, 0x9a97c8d4, 0x7f3828dc, 0x50c7f6ed, 0x1ba76268, 0x1c9b129e, 0x4566cbe1,
        0x5234e724, 0x0c8807ae, 0x6a4f773d, 0x1e7170d5, 0x4896e4c4, 0x7c906e72, 0xa8d616a7, 0xaddcb9c8,
        0x4ad4efe0, 0xd10d1d10, 0x67dd4acc, 0xf9b9df6f, 0x8ebeef9e, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8,
        0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda,
        0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c,
        0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
        0xb2bd0b28, 0xb6bbf34e, 0x5ab04de3, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9,
        0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
        0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd,
        0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff,
        0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661,
        0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53,
        0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
        0xcdd70693, 0x54de5729, 0x23d967bf, 0xb66e311f, 0x4de44d92, 0x3c8ea00a, 0xd7ad7d46, 0x9ee61a8b,
        0xffe52250, 0xc0ac544b, 0x64982d52, 0x946d9ca7, 0x0a121a93, 0x70f06b51, 0xd4229fe1, 0x65fef2f6,
        0x9c3b6a6b, 0xbb9bc5b0, 0x1193b3f6, 0xb8fc40fe, 0x8abceee4, 0x17cf3a71, 0x7d6e479f, 0x1d0d00ae,
        0xd4ade495, 0xa56ada2d, 0x42f0c0c9, 0x72c0a60b, 0x2de92c6f, 0x8cd2a4e8, 0x6080fb24, 0x9c17147d,
        0xb9aeef8d, 0xec4e6c89, 0x8ef90f21, 0x98712a77, 0x6cd99a6b, 0x0e770fb3, 0x59d0862d, 0x06f6ca66,
        0x4a580fd4, 0xe0223c39, 0x3a787e38, 0x8e38dc76, 0x1e0b0c7a, 0x3df95b65, 0x2d2f2c99, 0x0d2bc1f8,
        0xa4b17a22, 0x7bc5a8a9, 0xada7b402, 0x59e7beaa, 0x19f06a20, 0x60537544, 0x64e8c8fe, 0x01ba7a70,
        0x5e0f3252, 0x6c5e6170, 0x76bbb52f, 0x25e0955f, 0x49ca1863, 0x8a0b0eda, 0x933f5a6d, 0x0a62d11a,
        0x3a6e0a36, 0x7b2d0290, 0x0e6452b1, 0x02e6b3b6, 0x16f4c94c, 0xc45d1df4, 0x8b88b765, 0x0db0febc,
        0x20fc88ec, 0x4df82b84, 0x64ec5f70, 0x3d67f9e4, 0x2057c621, 0x73f1564e, 0x972a246e, 0x4f050d56,
        0xff6b4ea5, 0x30ed5926, 0x00dccff9, 0x22c6c230, 0x5a138c6f, 0x287f2058, 0x3ab5ff1f, 0x18a6274e,
        0x149e6e70, 0xea9f5db2, 0x4c9b93dd, 0x0ad0ba47, 0x7ce70c1a, 0x813f3978, 0x1aebe5df, 0x7adab259,
        0x134cb302, 0x0c0d3fa0, 0x6d67b107, 0x0f11d19f, 0x4e81b7be, 0x59577a2f, 0x3f7c8018, 0x79b62bc0,
        0x98565f07, 0x5ee053da, 0x046d7c6f, 0x09d95b1a, 0x8c361a73, 0xc2e0f9f8, 0x4325a334, 0x8aea5e86,
        0xd10f93ed, 0x71a6c09b, 0x0a6b7dde, 0xd5660291, 0x4e28c8ae, 0x4d76eeaf, 0x2e48f275, 0xd050e7d7,
        0x2c6e9f21, 0xd55a5cb0, 0x2a2a49e4, 0xd27f2d47, 0x5ef99dc9, 0x5baafdcf, 0x5db0ed4d, 0x9aeacae5,
        0x6326e43f
    ],
    [
        0xca66fa65, 0xd4cc5d14, 0x0d59ed72, 0x2e0866dd, 0xd7a17194, 0x15d90483, 0xfd0c50e5, 0xeba0e858,
        0x318eb631, 0x9858e7d2, 0x3ee93a7d, 0x2a6b47d7, 0x4a436441, 0xe7fc5590, 0x2b4eb817, 0xa18b6e9b,
        0x0d2d0a1b, 0x2af26038, 0x5cb106ad, 0x7036fc03, 0xb0e52ae3, 0x95da96f4, 0xe8f1d25a, 0x7b30e209,
        0x5ac17db8, 0x5d25f5af, 0x8cd5f4c6, 0x99ff077f, 0x6181eb2f, 0xcc51dc0a, 0x1205763c, 0xf9b9df6a,
        0x8eac5667, 0x3793bf09, 0xe7f3a766, 0x9b8c3a2e, 0x56eb9806, 0x580a2614, 0x0ca6a2eb, 0x519ac78a,
        0x3d9a6bad, 0x1df3d82e, 0x62e0b12b, 0x0de7535f, 0x9d4af6be, 0x884d1d68, 0x6db6dede, 0x698cb577,
        0x22064e99, 0x5907f4a0, 0xb11bae6b, 0x841a65c1, 0x1a3fd8de, 0xf4f2fb03, 0xd2c6f72d, 0x99563a58,
        0xe45ec51c, 0x6250afaa, 0x49ef0eb7, 0x6e356932, 0x5ae67f1e, 0x82c9f499, 0xa3c7cafc, 0x735ae5ba,
        0x406de6da, 0xd5d00b87, 0x105dc4b6, 0x315ce2ea, 0xcb5acef9, 0x5d0dd9d0, 0x135f7ae4, 0x6d81fe4c,
        0x0c23241d, 0x39f0502c, 0x0dcd0fb8, 0xb8ca30c8, 0x7f9ab1d4, 0x9dc5ada8, 0x5615f4d6, 0xc3df991b,
        0x30ee889e, 0xa4e8f8bd, 0x5b38e7d3, 0xf5af0de6, 0x31b4a597, 0x7f00f942, 0x73258b74, 0x342e98f1,
        0xe5f4f185, 0x596f32e1, 0x7ae98fce, 0x6d9eccf6, 0x5411edd0, 0x5145a3be, 0x5dce8d4e, 0xe136ac4c,
        0x49fb66a7, 0x740d8cf5, 0xe675d99d, 0x91da5f12, 0x7601d657, 0x028f7f66, 0x1db0e4d7, 0xeca0bf7a,
        0xd7d2d28d, 0x4b72c77e, 0x09e8f1ea, 0x9e6561fb, 0xe6f8f350, 0x01d9b093, 0xadafa603, 0x56f52c99,
        0x35850377, 0x67b10a17, 0xe4e4b7f8, 0x03e13b24, 0x9e0e0d68, 0xcc35c794, 0x01a9d4d0, 0x1d6e95b1,
        0x1a8a8399, 0x1c162685, 0x9d0e829c, 0x500c7ba4, 0x7543f7ad, 0xa3e0800c, 0x0af7f3ef, 0x88069a99,
        0x38b0a6d6, 0xece67666, 0x1c6a7ea3, 0x13776066, 0x504bc6d0, 0x401d57fc, 0xa7c177d0, 0x9fc00b72,
        0xa7377f5a, 0x09f4f94d, 0x9c7a54c2, 0xd41d8e14, 0x87ce2785, 0x79d81a61, 0x8dc5deda, 0x97166edb,
        0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00,
        0xbb25bfe2, 0x35dd37d6, 0x311e4543, 0x9efa1168, 0x06eeffca, 0x01d07cf3, 0x66b23c04, 0x71661e15,
        0xa1171a81, 0xd01fe2b2, 0xbaa0bc64, 0x14de5a2a, 0x15837b95, 0x3c5e2b77, 0x3a831c66, 0xd49fcb08,
        0x0d615a63, 0xc3c0fe82, 0x75ea45dd, 0x5c0ed057, 0x0a9da2f5, 0x7e49bd26, 0xc3364cf6, 0x61943ba5,
        0xb5be3f19, 0x8a94de39, 0x9cb07892, 0xd8b27e83, 0x0d6b6a3a, 0x0f259c3d, 0x1d6b79a0, 0xe0d2e3c1,
        0x2e9f83f9, 0xf8a0e46a, 0x8c7b5eb8, 0x5279c8aa, 0x13f8a122, 0xda3a1e7c, 0x8a1ac2e5, 0x986d8a96,
        0x0cc0ef3f, 0x7a773e89, 0x07a8a4d8, 0x79af7f18, 0x783e6b99, 0x24efba60, 0x55464dd0, 0x3b2ba845,
        0x5aa15014, 0xe927e4ec, 0x92aeba64, 0xa95f9e82, 0x1b2a20eb, 0x0e8efec2, 0x4e2e0125, 0x0f2684c2,
        0x5c92c5fe, 0xd4cd7f40, 0x2661a5cd, 0xea6d43f7, 0x1cdad067, 0x9e2f8559, 0x5b0e4a90, 0x8ff55287,
        0x5d6ef4ca, 0x615b0865, 0x7b8a11f9, 0x22936fb2, 0x5659ecf4, 0x92b16073, 0x5edef766, 0x696b4d56,
        0x73dc1683, 0x659a736f, 0x231c8a00, 0xbfd0a63b, 0xaa0a9c30, 0xd5c2e0f8, 0x47b2cf7f, 0x3060a07e,
        0x37bef5c6, 0xc8ef9761, 0xa9f1d6b6, 0x0ff3f675, 0x2ac528e8, 0x0ab3ad7f, 0x018cb9e8, 0xa83f28ed,
        0x8d6b4d51, 0x3a334abf, 0x364f6ffa, 0x41047a60, 0x7f8d0826, 0xbc438c5d, 0xd26d04a9, 0x19afdb03,
        0x01e58b8e, 0x9c8b6f90, 0x0ee07d63, 0x0b22d8e0, 0x29f3cdb0, 0xc4c7e406, 0xf9d9a8e6, 0x0ed1f9be,
        0xe0d5c179
    ]
];

function F(x) {
    const d = (x & 0xff000000) >>> 24;
    const c = (x & 0x00ff0000) >>> 16;
    const b = (x & 0x0000ff00) >>> 8;
    const a = x & 0x000000ff;

    return ((S[0][a] + S[1][b]) ^ S[2][c]) + S[3][d];
}

function round(xl, xr, n) {
    xl = xl ^ P[n];
    xr = xr ^ F(xl);
    return [xr, xl];
}

function initializeKey(key) {
    const keyBytes = new Uint8Array(key);
    let p = [...P];
    let s = [...S.map(row => [...row])];

    let data = 0;
    let datal = 0;
    let j = 0;

    for (let i = 0; i < 18; i += 2) {
        data = (data << 8) | keyBytes[j % keyBytes.length];
        datal = (datal << 8) | keyBytes[(j + 1) % keyBytes.length];
        p[i] = p[i] ^ data;
        p[i + 1] = p[i + 1] ^ datal;
        j += 2;
    }

    let xl = 0, xr = 0;
    for (let i = 0; i < 18; i += 2) {
        [xl, xr] = round(xl, xr, i);
        p[i] = xl;
        p[i + 1] = xr;
    }

    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 256; j += 2) {
        [xl, xr] = round(xl, xr, j % 18);
        s[i][j] = xl;
        s[i][j + 1] = xr;
        }
    }

    return { p, s };
}

function encryptBlock(xl, xr, p, s) {
    for (let i = 0; i < 16; i++) {
        [xl, xr] = round(xl, xr, i);
    }
    xl = xl ^ p[16];
    xr = xr ^ p[17];
    return [xr, xl];
}

function decryptBlock(xl, xr, p, s) {
    for (let i = 17; i > 1; i--) {
        [xl, xr] = round(xl, xr, i);
    }
    xl = xl ^ p[1];
    xr = xr ^ p[0];
    return [xr, xl];
}

function pad(data) {
    const blockSize = 8;
    const padLen = blockSize - (data.length % blockSize);
    const padding = new Uint8Array(padLen).fill(padLen);
    return new Uint8Array([...new TextEncoder().encode(data), ...padding]);
}

function unpad(data) {
    const padLen = data[data.length - 1];
    return new TextDecoder().decode(data.slice(0, -padLen));
}

export async function encryptPin(pin, password) {
    const salt = 'fixed-salt-123';
    const key = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        password + salt
    );
    const { p, s } = initializeKey(new TextEncoder().encode(key.substring(0, 32)));

    const paddedData = pad(pin);
    const blocks = [];
    for (let i = 0; i < paddedData.length; i += 8) {
        const block = paddedData.slice(i, i + 8);
        let xl = 0, xr = 0;
        for (let j = 0; j < 4; j++) {
        xl |= block[j] << (24 - j * 8);
        xr |= block[j + 4] << (24 - (j + 4) * 8);
        }
        [xl, xr] = encryptBlock(xl, xr, p, s);
        blocks.push(xl, xr);
    }

    const result = new Uint8Array(blocks.length * 4);
    blocks.forEach((val, i) => {
        result[i * 4] = (val >>> 24) & 0xff;
        result[i * 4 + 1] = (val >>> 16) & 0xff;
        result[i * 4 + 2] = (val >>> 8) & 0xff;
        result[i * 4 + 3] = val & 0xff;
    });

    return Buffer.from(result).toString('base64');
}

export async function decryptPin(encryptedPin, password) {
    const salt = 'fixed-salt-123'; 
    const key = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        password + salt
    );
    const { p, s } = initializeKey(new TextEncoder().encode(key.substring(0, 32)));

    const data = new Uint8Array(Buffer.from(encryptedPin, 'base64'));
    const blocks = [];
    for (let i = 0; i < data.length; i += 8) {
        let xl = 0, xr = 0;
        for (let j = 0; j < 4; j++) {
        xl |= data[i + j] << (24 - j * 8);
        xr |= data[i + j + 4] << (24 - (j + 4) * 8);
        }
        [xl, xr] = decryptBlock(xl, xr, p, s);
        blocks.push(xl, xr);
    }

    const result = new Uint8Array(blocks.length * 4);
    blocks.forEach((val, i) => {
        result[i * 4] = (val >>> 24) & 0xff;
        result[i * 4 + 1] = (val >>> 16) & 0xff;
        result[i * 4 + 2] = (val >>> 8) & 0xff;
        result[i * 4 + 3] = val & 0xff;
    });

    return unpad(result);
}